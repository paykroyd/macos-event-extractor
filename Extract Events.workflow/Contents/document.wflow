<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>528</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>2.0.3</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>COMMAND_STRING</key>
					<dict/>
					<key>CheckedForUserDefaultShell</key>
					<dict/>
					<key>inputMethod</key>
					<dict/>
					<key>shell</key>
					<dict/>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run Shell Script.action</string>
				<key>ActionName</key>
				<string>Run Shell Script</string>
				<key>ActionParameters</key>
				<dict>
					<key>COMMAND_STRING</key>
					<string># Event Extractor Service - Extract events from clipboard text
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &amp;&amp; pwd)"

# Find the extract_event directory
EXTRACT_EVENT_DIR=""

# Check common locations
for dir in "$HOME/extract_event" "$HOME/code/extract_event" "$HOME/Desktop/extract_event" "$SCRIPT_DIR/../../../extract_event" "$SCRIPT_DIR/../../extract_event" "$SCRIPT_DIR/../extract_event" "$SCRIPT_DIR/extract_event"; do
    if [ -d "$dir" ] &amp;&amp; [ -f "$dir/main.py" ]; then
        EXTRACT_EVENT_DIR="$dir"
        break
    fi
done

if [ -z "$EXTRACT_EVENT_DIR" ]; then
    osascript -e 'display alert "Event Extractor Error" message "Cannot find extract_event directory. Please ensure it is in your home directory, Documents, or Desktop." buttons {"OK"} default button "OK"'
    exit 1
fi

# Change to the extract_event directory
cd "$EXTRACT_EVENT_DIR"

# Find Python executable
PYTHON_CMD=""
if [ -f "venv/bin/python" ]; then
    PYTHON_CMD="venv/bin/python"
elif [ -f "venv/bin/python3" ]; then
    PYTHON_CMD="venv/bin/python3"
elif command -v python3 &amp;&gt; /dev/null; then
    PYTHON_CMD="python3"
elif command -v python &amp;&gt; /dev/null; then
    PYTHON_CMD="python"
else
    osascript -e 'display alert "Event Extractor Error" message "Python not found. Please ensure Python 3 is installed." buttons {"OK"} default button "OK"'
    exit 1
fi

# Write the input to a temp file
input=$(cat | iconv -f UTF-8 -t UTF-8 2&gt;/dev/null || cat)
echo $input &gt; /tmp/extract_event.txt

# Run the event extractor with clipboard input
"$PYTHON_CMD" main.py -f /tmp/extract_event.txt 2&gt;&amp;1 | while IFS= read -r line; do
    echo "$(date): $line" &gt;&gt; "$EXTRACT_EVENT_DIR/service.log"
done

# Check the exit status and show appropriate notification
if [ ${PIPESTATUS[0]} -eq 0 ]; then
    osascript -e 'display notification "Events processed successfully" with title "Event Extractor"'
else
    osascript -e 'display notification "Failed to process events. Check service.log for details." with title "Event Extractor"'
fi</string>
					<key>CheckedForUserDefaultShell</key>
					<true/>
					<key>inputMethod</key>
					<integer>0</integer>
					<key>shell</key>
					<string>/bin/bash</string>
					<key>source</key>
					<string>#!/bin/bash

# Event Extractor Service - Extract events from clipboard text
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &amp;&amp; pwd)"

# Find the extract_event directory
EXTRACT_EVENT_DIR=""

# Check common locations
for dir in "$HOME/extract_event" "$HOME/Documents/extract_event" "$HOME/Desktop/extract_event" "$SCRIPT_DIR/../../../extract_event" "$SCRIPT_DIR/../../extract_event" "$SCRIPT_DIR/../extract_event" "$SCRIPT_DIR/extract_event"; do
    if [ -d "$dir" ] &amp;&amp; [ -f "$dir/main.py" ]; then
        EXTRACT_EVENT_DIR="$dir"
        break
    fi
done

if [ -z "$EXTRACT_EVENT_DIR" ]; then
    osascript -e 'display alert "Event Extractor Error" message "Cannot find extract_event directory. Please ensure it is in your home directory, Documents, or Desktop." buttons {"OK"} default button "OK"'
    exit 1
fi

# Change to the extract_event directory
cd "$EXTRACT_EVENT_DIR"

# Find Python executable
PYTHON_CMD=""
if [ -f "venv/bin/python" ]; then
    PYTHON_CMD="venv/bin/python"
elif [ -f "venv/bin/python3" ]; then
    PYTHON_CMD="venv/bin/python3"
elif command -v python3 &amp;&gt; /dev/null; then
    PYTHON_CMD="python3"
elif command -v python &amp;&gt; /dev/null; then
    PYTHON_CMD="python"
else
    osascript -e 'display alert "Event Extractor Error" message "Python not found. Please ensure Python 3 is installed." buttons {"OK"} default button "OK"'
    exit 1
fi

# Run the event extractor with clipboard input
"$PYTHON_CMD" main.py 2&gt;&amp;1 | while IFS= read -r line; do
    echo "$(date): $line" &gt;&gt; "$EXTRACT_EVENT_DIR/service.log"
done

# Check the exit status and show appropriate notification
if [ ${PIPESTATUS[0]} -eq 0 ]; then
    osascript -e 'display notification "Events processed successfully" with title "Event Extractor"'
else
    osascript -e 'display notification "Failed to process events. Check service.log for details." with title "Event Extractor"'
fi</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.RunShellScript</string>
				<key>CFBundleVersion</key>
				<string>2.0.3</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunShellScriptAction</string>
				<key>InputUUID</key>
				<string>12345678-1234-1234-1234-123456789012</string>
				<key>Keywords</key>
				<array>
					<string>Shell</string>
					<string>Script</string>
					<string>Command</string>
					<string>Run</string>
					<string>Unix</string>
				</array>
				<key>OutputUUID</key>
				<string>12345678-1234-1234-1234-123456789013</string>
				<key>UUID</key>
				<string>12345678-1234-1234-1234-123456789014</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<integer>0</integer>
						<key>name</key>
						<string>inputMethod</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
					<key>1</key>
					<dict>
						<key>default value</key>
						<false/>
						<key>name</key>
						<string>CheckedForUserDefaultShell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>1</string>
					</dict>
					<key>2</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>2</string>
					</dict>
					<key>3</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>COMMAND_STRING</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>3</string>
					</dict>
					<key>4</key>
					<dict>
						<key>default value</key>
						<string>/bin/sh</string>
						<key>name</key>
						<string>shell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>4</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>309.000000:607.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run Shell Script.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>applicationBundleIDsByPath</key>
		<dict/>
		<key>applicationPaths</key>
		<array/>
		<key>inputTypeIdentifier</key>
		<string>com.apple.Automator.text</string>
		<key>outputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>presentationMode</key>
		<integer>11</integer>
		<key>processesInput</key>
		<false/>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.text</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<false/>
		<key>systemImageName</key>
		<string>NSActionTemplate</string>
		<key>useAutomaticInputType</key>
		<true/>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
